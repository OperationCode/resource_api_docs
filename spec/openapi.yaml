openapi: 3.0.1

servers:
- url: https://resources.operationcode.org/api/v1
  description: Default Server
info:
  title: Operation Code Resources API
  version: '1.0'
  x-logo:
    url: 'https://operation-code-assets.s3.us-east-2.amazonaws.com/branding/logos/small-blue-logo.png'
    altText: 'Operation Code Logo'
    backgroundColor: '#252e3e'
  description: |
    # Introduction
    Operation Code Resources API is a collection of programming and cyber security learning resources curated by and for the Operation Code community.

    # Authentication
    Create (POST) and update (PUT) routes are protected and require an API key. API key requests to the `/apikey` endpoint require valid Operation Code credentials in the request body. 
    
    If you are not already a member of our community, join Operation Code [HERE](https://https://operationcode.org/join).

    When you create a request to an authenticated route, you *MUST* include the header `x-apikey` along with your API key.

  contact:
    name: Operation Code
    url: https://operationcode.org/contact

paths:
  /apikey:
    post:
      summary: API KEY REQUEST
      description: Request API key by providing valid Operation Code credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRequest'
        required: true
      responses:
        200:
          description: API Key Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
  /categories:
    get:
      summary: CATEGORIES LIST
      description: Gets a list of all available resource categories, such as books,
        tutorials, and coding challenges.
      responses:
        200:
          description: A resource list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                0:
                  value: |
                    {
                      'apiVersion':'1.0',
                      'data':[
                        {'id':1,'name':'Books'},
                        {'id':2,'name':'Code Challenges'},
                        {'id':3,'name':'Getting Started'},
                        {'id':4,'name':'Tutorials'},
                        {'id':5,'name':'Online Courses'},
                        {'id':6,'name':'Jobs'},
                        {'id':7,'name':'Tools'},
                        {'id':8,'name':'Programming for Kids'},{'id':9,'name':'REPL/Code Simulators'},{'id':10,'name':'Design'},
                        {'id':11,'name':'Computer Hardware'},{'id':12,'name':'Computer Networking'},{'id':13,'name':'Cloud IDEs'},
                        {'id':14,'name':'Docker'},
                        {'id':15,'name':'Regular Expressions'},{'id':16,'name':'Mentorship'},
                        {'id':17,'name':'News'},
                        {'id':18,'name':'Back End Dev'},
                        {'id':19,'name':'Mobile Dev'},
                        {'id':20,'name':'Cheat Sheets'}],
                      'has_next':true,
                      'has_prev':false,
                      'number_of_pages':4,
                      'page':1,
                      'records_per_page':20,
                      'status':'ok',
                      'status_code':200,
                      'total_count':72
                    }
  /languages:
    get:
      summary: LANGUAGES LIST
      description: Gets list of all languages and topics available such as Python, SQL, and Artificial Intelligence
      responses:
        200:
          description: A language list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
              examples:
                0:
                  value: |
                    {
                      'apiVersion':'1.0',
                      'data':[
                        {'id':1,'name':'multiple'},
                        {'id':2,'name':'Python'},
                        {'id':3,'name':'Unix/Linux/*nix'},
                        {'id':4,'name':'Bash'},
                        {'id':5,'name':'C'},
                        {'id':6,'name':'Sysadmin'},
                        {'id':7,'name':'JavaScript'},
                        {'id':8,'name':'HTML'},
                        {'id':9,'name':'PHP'},
                        {'id':10,'name':'Ruby'},
                        {'id':11,'name':'Aspectwerkz'},
                        {'id':12,'name':'Artificial Intelligence'},{'id':13,'name':'C++'},
                        {'id':14,'name':'MongoDB'},
                        {'id':15,'name':'SQL'},
                        {'id':16,'name':'R'},
                        {'id':17,'name':'GraphQL'},
                        {'id':18,'name':'Swift'},
                        {'id':19,'name':'Android'},
                        {'id':20,'name':'CSS'}],
                      'has_next':true,
                      'has_prev':false,
                      'number_of_pages':4,
                      'page':1,
                      'records_per_page':20,
                      'status':'ok',
                      'status_code':200,
                      'total_count':73
                    }
  /resources/{id}:
    get:
      summary: RESOURCE DETAILS BY ID
      description: Gets more details about a specific resource, given the resource
        ID
      parameters:
      - name: id
        in: path
        description: Resource ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A specific resource's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
              example:
                sample_book:
                  value: |
                    {
                      'apiVersion':'1.0',
                      'data':{
                        'category':'Books',
                        'created_at':'2019-06-15 17:55:32',
                        'downvotes':0,
                        'id':3,
                        'languages':[],
                        'last_updated':',
                        'name':'Free Tech Books',
                        'notes':'Focuses on general computer science concepts rather than a specific language',
                        'paid':false,
                        'times_clicked':0,
                        'upvotes':0,
                        'url':'http://www.freetechbooks.com/'
                        
                      },
                      'status':'ok',
                      'status_code':200
                    }
        404:
          description: Resource not found
    put:
      summary: UPDATE A RESOURCE
      description: Updates an existing learning resource entry. The request body should be a JSON object containing the properties to be updated and their corresponding new values. 
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              update_name:
                value: |
                  {
                    'name': 'Updated Book Title'
                  }  
        required: true
      parameters:
        - name: id
          in: path
          description: Resource ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64   
      responses:
        200:
          description: Updated resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        404:
          $ref: '#/components/responses/NotFound'
      security:
      - ApiKeyAuth: []
  /resources/{id}/{vote_direction}:
    put:
      summary: RATE AN EXISTING RESOURCE BY ID
      description:
        Let other community members know the quality of a specific resource by adding an upvote or downvote rating. 
        To cast a downvote, enter `downvote` for the `{vote_direction}`. For upvotes, enter `upvote`.
      parameters:
      - name: id
        in: path
        description: Resource ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: vote_direction
        in: path
        description: Rating you are providing on this resource.
        required: true
        schema:
          type: string
          enum:
            - upvote
            - downvote
      responses:
        200:
          description: Updated resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
              examples:
                0:
                  value: |
                    {
                      'apiVersion': '1.0',
                      'data': {
                          'category': 'Tutorial',
                          'created_at': '2019-07-21 15:41:19',
                          'downvotes': 0,
                          'id': 2137,
                          'languages': [],
                          'last_updated': '2019-07-22 16:05:53',
                          'name': 'Some, but not ALL of the knowledge',
                          'notes': null,
                          'paid': false,
                          'times_clicked': 0,
                          'upvotes': 1,
                          'url': 'http://www.test.com'
                      },
                      'status': 'ok',
                      'status_code': 200
                    }
      security:
      - ApiKeyAuth: []
  /resources/{id}/click:
    put:
      summary: UPDATE RESOURCE VISITS BY ID
      description:
        Increments the `times_clicked` property of a resource 
      parameters:
      - name: id
        in: path
        description: Resource ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Updated resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
              examples:
                0:
                  value: |
                    {
                      'apiVersion': '1.0',
                      'data': {
                          'category': 'Tutorial',
                          'created_at': '2019-07-21 15:41:19',
                          'downvotes': 0,
                          'id': 2137,
                          'languages': [],
                          'last_updated': '2019-07-22 16:05:53',
                          'name': 'Some, but not ALL of the knowledge',
                          'notes': null,
                          'paid': false,
                          'times_clicked': 3,
                          'upvotes': 1,
                          'url': 'http://www.test.com'
                      },
                      'status': 'ok',
                      'status_code': 200
                    }
        404:
          $ref: '#/components/responses/NotFound'
  /resources:
    get:
      summary: RETRIEVE RESOURCES
      description: Gets list of all available resource entries or filtered entries based on provided criteria.
      parameters:
        - in: query
          name: paid
          required: false
          description: Whether the resource is paid or not. To search for FREE resources, make a `GET` request to `/resources?paid=false`.
          schema:
            type: boolean
            enum:
              - true
              - false
        - in: query
          name: language
          required: false
          description: Language or main technical focus of resource. For example, to filter for Python resources, make a `GET` request to `/resources?language=python`.
          schema:
            type: string
        - in: query
          name: category
          required: false
          description: Category of resource. For example, to filter for book resources, make a `GET` request to `/resources?category=books`.
          schema:
            type: string

      responses:
        200:
          description: A list of resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredResourcesResponse'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      summary: CREATE A RESOURCE
      description: Creates a new learning resource entry. The required properties for a new entry are `category`, `name`, `paid`, and `url` and must be included in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        200:
          description: Added new resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - ApiKeyAuth: []
  /search:
    get:
      summary: SEARCH FOR RESOURCES BY KEYWORD
      description: Searches for resources containing a given keyword. For example, to search for any resource containing the word `algorithm`, make a `GET` request to `search?q=algorithm`
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
      responses:
        200:
          description: Search results returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        404:
          $ref: '#/components/responses/NotFound'
  
components:
  schemas:
    Error:
      type: object
      properties:
        apiVersion: 
          type: string
        data: 
          type: object
        errors: 
          type: string
        status: 
          type: string
        status_code: 
          type: integer

    Resource:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          $ref: '#/components/schemas/Resource_data'
        status_code:
          type: integer
        status:
          type: string
    Category:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          $ref: '#/components/schemas/Category_data'
        has_next:
          type: integer
        has_previous:
          type: integer
        number_of_pages:
          type: integer
        page:
          type: integer
        records_per_page:
          type: integer
        status:
          type: string
        status_code:
          type: integer
        total_count:
          type: integer
    Category_data:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string

    Language:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          $ref: '#/components/schemas/Language_data'
        has_next:
          type: integer
        has_previous:
          type: integer
        number_of_pages:
          type: integer
        page:
          type: integer
        records_per_page:
          type: integer
        status:
          type: string
        status_code:
          type: integer
        total_count:
          type: integer
    Language_data:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    
    SearchResponse:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Resource_data'
        number_of_pages:
          type: integer
        page:
          type: integer
        records_per_page:
          type: integer
        status:
          type: string
        status_code:
          type: integer
        total_count:
          type: integer
    FilteredResourcesResponse:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Resource_data'
        has_next:
          type: integer
        has_previous:
          type: integer
        number_of_pages:
          type: integer
        page:
          type: integer
        records_per_page:
          type: integer
        status:
          type: string
        status_code:
          type: integer
        total_count:
          type: integer
    ApiKeyResponse:
      type: object
      properties:
        apiVersion:
          type: string
        data:
          $ref: '#/components/schemas/ApiKeyResponse_data'
        status:
          type: string
        status_code:
          type: integer
    ApiKeyRequest:
      type: object
      $ref: '#/components/schemas/ApiKeyRequest_data'
    Resource_data:
      type: object
      properties:
        category:
          type: string
        created_at:
          type: string
          format: date-time
        downvotes:
          type: integer
        id:
          type: integer
        last_updated:
          type: string
          format: date-time
        languages:
          type: array
          items:
            type: string
        name:
          type: string
        notes:
          type: string
        paid:
          type: boolean
        times_clicked:
          type: integer
        upvotes:
          type: integer
        url:
          type: string
      required: [category, name, paid, url]
    ApiKeyRequest_data:
      type: object
      properties:
        email:
          type: string
          description: A valid e-mail address registered with Operation Code
        password:
          type: string
          description: Password 
    ApiKeyResponse_data:
      type: object
      properties:
        apikey:
          type: string
        created_at:
          type: string
          format: date-time
        email:
          type: string
        last_updated:
          type: string
          format: date-time
  responses:
    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiKeyAuth:
      description: API Key Authentication
      type: apiKey
      name: x-apikey
      in: header
